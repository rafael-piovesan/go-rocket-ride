//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var StagedJobs = newStagedJobsTable("public", "staged_jobs", "")

type stagedJobsTable struct {
	postgres.Table

	//Columns
	ID      postgres.ColumnInteger
	JobName postgres.ColumnString
	JobArgs postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StagedJobsTable struct {
	stagedJobsTable

	EXCLUDED stagedJobsTable
}

// AS creates new StagedJobsTable with assigned alias
func (a StagedJobsTable) AS(alias string) *StagedJobsTable {
	return newStagedJobsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StagedJobsTable with assigned schema name
func (a StagedJobsTable) FromSchema(schemaName string) *StagedJobsTable {
	return newStagedJobsTable(schemaName, a.TableName(), a.Alias())
}

func newStagedJobsTable(schemaName, tableName, alias string) *StagedJobsTable {
	return &StagedJobsTable{
		stagedJobsTable: newStagedJobsTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newStagedJobsTableImpl("", "excluded", ""),
	}
}

func newStagedJobsTableImpl(schemaName, tableName, alias string) stagedJobsTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		JobNameColumn  = postgres.StringColumn("job_name")
		JobArgsColumn  = postgres.StringColumn("job_args")
		allColumns     = postgres.ColumnList{IDColumn, JobNameColumn, JobArgsColumn}
		mutableColumns = postgres.ColumnList{JobNameColumn, JobArgsColumn}
	)

	return stagedJobsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		JobName: JobNameColumn,
		JobArgs: JobArgsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
