//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var IdempotencyKeys = newIdempotencyKeysTable("public", "idempotency_keys", "")

type idempotencyKeysTable struct {
	postgres.Table

	//Columns
	ID             postgres.ColumnInteger
	CreatedAt      postgres.ColumnTimestampz
	IdempotencyKey postgres.ColumnString
	LastRunAt      postgres.ColumnTimestampz
	LockedAt       postgres.ColumnTimestampz
	RequestMethod  postgres.ColumnString
	RequestParams  postgres.ColumnString
	RequestPath    postgres.ColumnString
	ResponseCode   postgres.ColumnInteger
	ResponseBody   postgres.ColumnString
	RecoveryPoint  postgres.ColumnString
	UserID         postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type IdempotencyKeysTable struct {
	idempotencyKeysTable

	EXCLUDED idempotencyKeysTable
}

// AS creates new IdempotencyKeysTable with assigned alias
func (a IdempotencyKeysTable) AS(alias string) *IdempotencyKeysTable {
	return newIdempotencyKeysTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new IdempotencyKeysTable with assigned schema name
func (a IdempotencyKeysTable) FromSchema(schemaName string) *IdempotencyKeysTable {
	return newIdempotencyKeysTable(schemaName, a.TableName(), a.Alias())
}

func newIdempotencyKeysTable(schemaName, tableName, alias string) *IdempotencyKeysTable {
	return &IdempotencyKeysTable{
		idempotencyKeysTable: newIdempotencyKeysTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newIdempotencyKeysTableImpl("", "excluded", ""),
	}
}

func newIdempotencyKeysTableImpl(schemaName, tableName, alias string) idempotencyKeysTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		IdempotencyKeyColumn = postgres.StringColumn("idempotency_key")
		LastRunAtColumn      = postgres.TimestampzColumn("last_run_at")
		LockedAtColumn       = postgres.TimestampzColumn("locked_at")
		RequestMethodColumn  = postgres.StringColumn("request_method")
		RequestParamsColumn  = postgres.StringColumn("request_params")
		RequestPathColumn    = postgres.StringColumn("request_path")
		ResponseCodeColumn   = postgres.IntegerColumn("response_code")
		ResponseBodyColumn   = postgres.StringColumn("response_body")
		RecoveryPointColumn  = postgres.StringColumn("recovery_point")
		UserIDColumn         = postgres.IntegerColumn("user_id")
		allColumns           = postgres.ColumnList{IDColumn, CreatedAtColumn, IdempotencyKeyColumn, LastRunAtColumn, LockedAtColumn, RequestMethodColumn, RequestParamsColumn, RequestPathColumn, ResponseCodeColumn, ResponseBodyColumn, RecoveryPointColumn, UserIDColumn}
		mutableColumns       = postgres.ColumnList{CreatedAtColumn, IdempotencyKeyColumn, LastRunAtColumn, LockedAtColumn, RequestMethodColumn, RequestParamsColumn, RequestPathColumn, ResponseCodeColumn, ResponseBodyColumn, RecoveryPointColumn, UserIDColumn}
	)

	return idempotencyKeysTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CreatedAt:      CreatedAtColumn,
		IdempotencyKey: IdempotencyKeyColumn,
		LastRunAt:      LastRunAtColumn,
		LockedAt:       LockedAtColumn,
		RequestMethod:  RequestMethodColumn,
		RequestParams:  RequestParamsColumn,
		RequestPath:    RequestPathColumn,
		ResponseCode:   ResponseCodeColumn,
		ResponseBody:   ResponseBodyColumn,
		RecoveryPoint:  RecoveryPointColumn,
		UserID:         UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
