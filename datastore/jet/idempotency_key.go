package jet

import (
	"context"
	"database/sql"
	"encoding/json"
	"errors"
	"github.com/rafael-piovesan/go-rocket-ride/entity"
	"github.com/rafael-piovesan/go-rocket-ride/entity/idempotency"

	// dot import so go code would resemble as much as native SQL
	// dot import is not mandatory
	. "github.com/go-jet/jet/v2/postgres"
	"github.com/rafael-piovesan/go-rocket-ride/datastore/jet/rides/public/model"
	. "github.com/rafael-piovesan/go-rocket-ride/datastore/jet/rides/public/table"
)

func (s *sqlStore) CreateIdempotencyKey(ctx context.Context, ik *entity.IdempotencyKey) (*entity.IdempotencyKey, error) {
	newRecord := model.IdempotencyKeys{
		ID:             ik.ID,
		CreatedAt:      ik.CreatedAt,
		IdempotencyKey: ik.IdempotencyKey,
		LastRunAt:      ik.LastRunAt,
		LockedAt:       ik.LockedAt,
		RequestMethod:  ik.RequestMethod,
		RequestParams:  "", // FIX ME
		RequestPath:    ik.RequestPath,
		ResponseCode:   (*int32)(ik.ResponseCode),
		ResponseBody:   &ik.ResponseBody.Message,
		RecoveryPoint:  ik.RecoveryPoint.String(),
		UserID:         ik.UserID,
	}

	insertStmt := IdempotencyKeys.INSERT(IdempotencyKeys.AllColumns).
		MODEL(newRecord).
		RETURNING(IdempotencyKeys.AllColumns)

	dest := model.IdempotencyKeys{}

	err := insertStmt.Query(s.db, &dest)

	return ik, err
}

func (s *sqlStore) GetIdempotencyKey(ctx context.Context, key string, userID int64) (*entity.IdempotencyKey, error) {
	getStmt := IdempotencyKeys.SELECT(IdempotencyKeys.AllColumns).
		FROM(IdempotencyKeys).
		WHERE(IdempotencyKeys.IdempotencyKey.EQ(String(key)).
			AND(IdempotencyKeys.UserID.EQ(Int(userID))))

	dest := model.IdempotencyKeys{}

	err := getStmt.Query(s.db, &dest)

	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, entity.ErrNotFound
		}
		return nil, err
	}

	return toIdempotencyKeyEntity(&dest, nil)
}

func (s *sqlStore) UpdateIdempotencyKey(ctx context.Context, ik *entity.IdempotencyKey) (*entity.IdempotencyKey, error) {
	updateStmt := IdempotencyKeys.
		UPDATE(IdempotencyKeys.MutableColumns).
		MODEL(IdempotencyKeys).
		WHERE(IdempotencyKeys.ID.EQ(Int(ik.ID))).
		RETURNING(IdempotencyKeys.AllColumns)

	dest := model.IdempotencyKeys{}

	err := updateStmt.Query(s.db, &dest)

	if err != nil {
		return nil, err
	}

	return toIdempotencyKeyEntity(&dest, ik)
}

func toIdempotencyKeyEntity(model *model.IdempotencyKeys, ent *entity.IdempotencyKey) (*entity.IdempotencyKey, error) {
	if ent == nil {
		ent = &entity.IdempotencyKey{}
	}

	ent.ID = model.ID
	ent.CreatedAt = model.CreatedAt
	ent.IdempotencyKey = model.IdempotencyKey
	ent.LastRunAt = model.LastRunAt
	ent.LockedAt = model.LockedAt
	ent.RequestMethod = model.RequestMethod
	//TODO: Create the raw message from the source model generated by JET
	ent.RequestParams = json.RawMessage{}
	ent.RequestPath = model.RequestPath
	ent.ResponseCode = (*idempotency.ResponseCode)(model.ResponseCode)
	//TODO: ResponseBody represents a struct not supported when first
	//generated the code using JET.
	ent.ResponseBody = &idempotency.ResponseBody{}
	ent.RecoveryPoint = idempotency.RecoveryPoint(model.RecoveryPoint)
	ent.UserID = model.UserID

	return ent, nil
}
