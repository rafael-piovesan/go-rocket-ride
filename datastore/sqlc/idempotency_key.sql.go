// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: idempotency_key.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/tabbed/pqtype"
)

const createIdempotencyKey = `-- name: CreateIdempotencyKey :one
INSERT INTO idempotency_keys(
    created_at,
    idempotency_key,
    last_run_at,
    locked_at,
    request_method,
    request_params,
    request_path,
    response_code,
    response_body,
    recovery_point,
    user_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, created_at, idempotency_key, last_run_at, locked_at, request_method, request_params, request_path, response_code, response_body, recovery_point, user_id
`

type CreateIdempotencyKeyParams struct {
	CreatedAt      time.Time
	IdempotencyKey string
	LastRunAt      time.Time
	LockedAt       sql.NullTime
	RequestMethod  string
	RequestParams  json.RawMessage
	RequestPath    string
	ResponseCode   sql.NullInt32
	ResponseBody   pqtype.NullRawMessage
	RecoveryPoint  string
	UserID         int64
}

func (q *Queries) CreateIdempotencyKey(ctx context.Context, arg CreateIdempotencyKeyParams) (IdempotencyKey, error) {
	row := q.db.QueryRowContext(ctx, createIdempotencyKey,
		arg.CreatedAt,
		arg.IdempotencyKey,
		arg.LastRunAt,
		arg.LockedAt,
		arg.RequestMethod,
		arg.RequestParams,
		arg.RequestPath,
		arg.ResponseCode,
		arg.ResponseBody,
		arg.RecoveryPoint,
		arg.UserID,
	)
	var i IdempotencyKey
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.IdempotencyKey,
		&i.LastRunAt,
		&i.LockedAt,
		&i.RequestMethod,
		&i.RequestParams,
		&i.RequestPath,
		&i.ResponseCode,
		&i.ResponseBody,
		&i.RecoveryPoint,
		&i.UserID,
	)
	return i, err
}

const getIdempotencyKey = `-- name: GetIdempotencyKey :one
SELECT id, created_at, idempotency_key, last_run_at, locked_at, request_method, request_params, request_path, response_code, response_body, recovery_point, user_id FROM idempotency_keys
WHERE user_id = $1 AND idempotency_key = $2 LIMIT 1
`

type GetIdempotencyKeyParams struct {
	UserID         int64
	IdempotencyKey string
}

func (q *Queries) GetIdempotencyKey(ctx context.Context, arg GetIdempotencyKeyParams) (IdempotencyKey, error) {
	row := q.db.QueryRowContext(ctx, getIdempotencyKey, arg.UserID, arg.IdempotencyKey)
	var i IdempotencyKey
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.IdempotencyKey,
		&i.LastRunAt,
		&i.LockedAt,
		&i.RequestMethod,
		&i.RequestParams,
		&i.RequestPath,
		&i.ResponseCode,
		&i.ResponseBody,
		&i.RecoveryPoint,
		&i.UserID,
	)
	return i, err
}

const updateIdempotencyKey = `-- name: UpdateIdempotencyKey :one
UPDATE idempotency_keys SET
    last_run_at=$2,
    locked_at=$3,
    response_code=$4,
    response_body=$5,
    recovery_point=$6
WHERE id = $1
RETURNING id, created_at, idempotency_key, last_run_at, locked_at, request_method, request_params, request_path, response_code, response_body, recovery_point, user_id
`

type UpdateIdempotencyKeyParams struct {
	ID            int64
	LastRunAt     time.Time
	LockedAt      sql.NullTime
	ResponseCode  sql.NullInt32
	ResponseBody  pqtype.NullRawMessage
	RecoveryPoint string
}

func (q *Queries) UpdateIdempotencyKey(ctx context.Context, arg UpdateIdempotencyKeyParams) (IdempotencyKey, error) {
	row := q.db.QueryRowContext(ctx, updateIdempotencyKey,
		arg.ID,
		arg.LastRunAt,
		arg.LockedAt,
		arg.ResponseCode,
		arg.ResponseBody,
		arg.RecoveryPoint,
	)
	var i IdempotencyKey
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.IdempotencyKey,
		&i.LastRunAt,
		&i.LockedAt,
		&i.RequestMethod,
		&i.RequestParams,
		&i.RequestPath,
		&i.ResponseCode,
		&i.ResponseBody,
		&i.RecoveryPoint,
		&i.UserID,
	)
	return i, err
}
