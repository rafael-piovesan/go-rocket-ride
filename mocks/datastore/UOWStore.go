// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	datastore "github.com/rafael-piovesan/go-rocket-ride/v2/datastore"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// UOWStore is an autogenerated mock type for the UOWStore type
type UOWStore struct {
	mock.Mock
}

// AuditRecords provides a mock function with given fields:
func (_m *UOWStore) AuditRecords() datastore.AuditRecord {
	ret := _m.Called()

	var r0 datastore.AuditRecord
	if rf, ok := ret.Get(0).(func() datastore.AuditRecord); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.AuditRecord)
		}
	}

	return r0
}

// IdempotencyKeys provides a mock function with given fields:
func (_m *UOWStore) IdempotencyKeys() datastore.IdempotencyKey {
	ret := _m.Called()

	var r0 datastore.IdempotencyKey
	if rf, ok := ret.Get(0).(func() datastore.IdempotencyKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.IdempotencyKey)
		}
	}

	return r0
}

// Rides provides a mock function with given fields:
func (_m *UOWStore) Rides() datastore.Ride {
	ret := _m.Called()

	var r0 datastore.Ride
	if rf, ok := ret.Get(0).(func() datastore.Ride); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.Ride)
		}
	}

	return r0
}

// StagedJobs provides a mock function with given fields:
func (_m *UOWStore) StagedJobs() datastore.StagedJob {
	ret := _m.Called()

	var r0 datastore.StagedJob
	if rf, ok := ret.Get(0).(func() datastore.StagedJob); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.StagedJob)
		}
	}

	return r0
}

// Users provides a mock function with given fields:
func (_m *UOWStore) Users() datastore.User {
	ret := _m.Called()

	var r0 datastore.User
	if rf, ok := ret.Get(0).(func() datastore.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.User)
		}
	}

	return r0
}

// NewUOWStore creates a new instance of UOWStore. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewUOWStore(t testing.TB) *UOWStore {
	mock := &UOWStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
